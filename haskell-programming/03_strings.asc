== Chapter 3. Strings

`print` and `putStr` and `putStrLn`

[source,haskell]
----
Prelude> :t print
print :: Show a => a -> IO ()
Prelude> :t putStr
putStr :: String -> IO ()
Prelude> :t putStrLn
putStrLn :: String -> IO ()
----

ghci has configuratoin file: `~/.ghci`, ex) `:set prompt "λ> "`

When building a project with Stack, having a main executable in a `Main.hs` file is obligatory:

[source, haskell]
----
module Main where

main :: IO ()
main = putStrLn "hello world!"
----


=== Exercises: Scope

. `y` is in scope for `z`
. `h` is not in scope for `g`
. `r` is not in scope for `area` and `d` is not in scope for `r`
. `r` and `d` are in scope for `area`

=== Exercises: Syntax Errors

. `++ [1, 2, 3] [4, 5, 6]` -> `(++) [1, 2, 3] [4, 5, 6]`
. `'<3' ++ ' Haskell'` -> `"<3" ++ " Haskell"`
. concat ["<3", " Haskell"]

=== Chapter Exercises

==== Reading Syntax

. 1)
.. `concat [[1, 2, 3], [4, 5, 6]]`: `[1, 2, 3, 4, 5, 6]`
.. `++ [1, 2, 3] [4, 5, 6]`: Error
.. `(++) "hello" " world"`: `"hello world"`
.. `["hello" ++ " world"]`: `["hello world"]`
.. `4 !! "hello"`: Error
.. `(!!) "hello" 4`: `'o'`
.. `take "4 lovely"`: Error
.. `take 3 "awesome"`: `"awe"`
. 2)
.. `concat [[1 * 6], [2 * 6], [3 * 6]]`: `[6, 12, 18]`
.. `"rain" ++ drop 2 "elbow"`: "rainbow" ->
.. `10 * head [1, 2, 3]`: Error -> `10`
.. `(take 3 "Julie") ++ (tail "yes")`: `Jules`
.. `concat [tail [1, 2, 3], tail [4, 5, 6], tail [7, 8, 9]]`: `[2, 3, 5, 6, 8, 9]`

==== Building functions

===== 1

[source,haskell]
----
"Curry is awesome" ++ "!"
"Curry is awesome!" !! 4
drop 9 "Curry is awesome!"
----

===== 2

[source,haskell]
----
waxOn x = x ++ "!"
waxOff x = x !! 4
waxOn x = drop 9 x
----

===== 3

[source,haskell]
----
thirdLetter :: [a] -> a
thirdLetter x = x !! 2
----

===== 4

[source,haskell]
----
letterIndex :: Int -> Char
letterIndex x = "Curry is awesome!" !! x
----

===== 5-6

[source,haskell]
----
include::src/03.hs[tags=exercies-5-6]
----


=== Definitions.

. `String == [Char]`
. *A type or datatype is a classification of values or data*. Types in Haskell determine what values are members of the type or that inhabit the type.
. `++`
. If a variable isn’t *visible* it’s not in *scope*.
. *Local bindings* cannot be imported by other programs or modules.
. *Top level bindings* can be made available to other modules
. Data structures
