== Hello Haskell

* *Normal Form*: We say that expressions are *normal form* when theyâ€™ve reached an irreducible form. 1 + 1 is a reducible for which 2 is normal form.

=== infix operator

----
:info (*)
infixl 7 *
  (1)(2)(3)
:info (^)
infixr 8 ^
  (1)(2)(3)
----
(1) Left/Right associative
(2) Higher is applied first
(3) Name

==== Exercises: Heal the Sick

question:

----
1. let area x = 3. 14 * (x * x)
2. let double x = b * 2
3. x = 7
   y = 10
  f = x + y
----

solution:

[source, haskell]
----
let area x = 3. 14 * (x * x)

--2.
let double x = b * 2

--3.
x = 7
y = 10
f = x + y
----

=== Arithmetic functions in Haskell

* Arithmetic modulus: *wrap around* upon reaching a certain value, called the modulus.

[options="header"]
|===
|Operator | Name | Note | ex
| +    | plus      | | .
| -    | minus     | | .
| *    | asterisk  | | .
| /    | slash     | | .
| div  | divide    | rounds down        | div 20 (-6) == -4
| quot | quotient  | rounds toward zero | div 20 (-6) == -3
| mod  | modulo    | the same sign as divisor  | .
| rem  | remainder | the same sign as dividend | .
|===

----
(-5) `mod` 2 == 1
5 `mod` (-2) == -1
(-5) `mod` (-2) == -1

(-5) `rem` 2 == -1
5 `rem` (-2) == 1
(-5) `rem` (-2) == -1
----

==== Negative numbers

* *negate*: `(-1) == (negate 1)`. In Haskell, a unary `-` is a syntactic sugar for negate
* *subtract*: For sectioning of like `(-1)`, use `(subtract 1)`

=== Parenthesization

* `$`(application) operator: `(2^) (2 + 2) == (2^) $ 2 + 2`
* Sectioning: Writing expressions like `(*30)` is called *sectioning*

=== Let and where

* `:load`: `:load` command unloaded everything in scope.

==== Exercises: A Head Code

[source, haskell]
----
include:src/02.hs[tag=a-head-code]
----

=== Chapter Exercises

==== Equivalent expressions

[source, haskell]
----
include::src/02.hs[tags=chapter-exercise-parenthesization]
----

==== Equivalent expressions

. `1 + 1 == 2`:
. `10 ^ 2 == 10 + 9 * 10`:
.. (1 + 9) * 10 -> 10 * 10 -> 10 ^ 2
. `400 - 37 /= (-) 37 400`:
.. (-) 37 400 -> 37 - 400
. `100 'div' 3 /= 100 / 3`: `/` is fractional division operator but `div` is integral division.
. `2 * 5 + 18 /= 2 * (5 + 18)`:

==== More fun with functions

[source, haskell]
----
include::src/02.hs[tags=chapter-exercise-more-fun]
----

=== Definitions

. *argument* and *parameter*: A parameter will be passed to the function when the function is called. Thus, parameters are usually variables. An argument is an input value the function is applied to.
. In Haskell, an *expression* is a well-structured combination of constants, variables, and functions. Irreducible constants is values, Reducible expression is expression. Technically values is expression too.
.* `2 * 2` is expresion, `4` is value.
. Functions can be described as a list of ordered pairs of their inputs and the resulting outputs, like a mapping. Given the function f x = x + 2 applied to the argument 2, we would have the ordered pair (2, 4) of its input and output.
. Infix notation is the style used in arithmetic and logic.
. In Haskell, operators must use symbols and not alphanumeric characters.
