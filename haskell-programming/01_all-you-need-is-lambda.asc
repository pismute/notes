== Chapter 1. ANYTHING FROM ALMOST NOTHING

The word purity in functional programming is sometimes also used to mean what is more properly called referential transparency. *Referential transparency* means that the same function, given the same values to evaluate, will always return the same result in pure functional programming, as they do in math.

=== Lambda Terms

* *expressions*: The word expression refers to a superset of all those things: an expression can be a variable name, an abstraction, or a combination of those things.
* *variables*: Variables here have no meaning or value; they are only names for potential inputs to functions.
* *abstractions*: An abstraction is a function.
** *head*: λ**x**.x
** *body*: λx.**x**

image::img/01_lambda-abstraction.png[]

=== Alpha Equavalence

For `λx.x`, The variable x here is not semantically meaningful except in its role in that single expression. Because of this, there’s a form of equivalence between lambda terms called *alpha equivalence*.

=== Beta Reduction

When we apply a function to an argument, we substitute the input expression for all instances of bound variables within the body of the abstraction. You also eliminate the head of the abstraction, since its only purpose was to bind a variable. This process is called *beta reduction*.

* `(λx.x)2` -> `2`
* *Bound Variable*: The purpose of the head of the function is to tell us which variables to replace when we apply our function, that is, to bind the variables. A *bound variable* must have the same value throughout the expression
** λx.**x**y
* *Free Variable*: But sometimes the body expression has variables that are not named in the head. We call those variables free variables.
** λx.x**y**
* Examples:
** `(λx.xy)z`
**. `(λx.xy)z`: We apply the lambda to the argument z.
**. `(λ[x ∶= z].xy)`: Since x is the bound variable, all instances of x in the body of the function will be replaced with z. The head will be eliminated, and we replace any x in the body with a z.
**. `zy`: The head has been applied away, and there are no more heads or bound variables. Since we know nothing about z or y, we can reduce this no further.
** Multiple Arguement: `(λxy.xy) 1 2`
**. `(λxy.xy) 1 2`
**. `(λx.(λy.xy)) 1 2`
**. `[x ∶= 1]`
**. `(λy.1y) 2`
**. `[y ∶= 2]`
**. `1 2`

=== Beta Normal Form

Beta normal form is when you cannot beta reduce the terms any further

=== Combinators

A combinator is a lambda term with no free variables. Combinators, as the name suggests, serve only to combine the arguments they are given.

* Comninators: `λx.x`, `λxy.x`, `λxyz.xz(yz)`
* Not: `λy.x`, `λx.xz`

=== Divergence & Covergence

*Divergence* here means that the reduction process never terminates or ends. Reducing terms should ordinarily converge to beta normal form, and divergence is the opposite of *convergence*, or normal form. Here’s an example of a lambda term called *omega*
that diverges:

. `(λx.xx)(λx.xx)`
. `([x ∶= (λx.xx)]xx)`
. `(λx.xx)(λx.xx)`: Substituting (λx.xx) for each occurence of x. We’re back to where we started and this reduction process never ends — we can say omega diverges.

=== Exercises

==== Equivalence Exercises: P. 13

* `λxy.xz`: `λx.(λy.xz)`
** `λxz.xz`: `λx.(λz.xz)`
** `λmn.mz`: `λm.(λn.mz)` => Alpha Equivalence
** `λz.(λx.xz)`: `λz.(λx.xz)`
* `λxy.xxy`: `λx.(λy.xxy)`
** `λmn.mnp`: `λm.(λn.mnp)`
** `λx.(λy.xy)`: `λx.(λy.xy)`
** `λa.(λb.aab)`: `λa.(λb.aab)` => Alpha Equivalence
* `λxyz.zx`:  `λx.(λy.(λz.zx))`
** `λx.(λy.(λz.z))`: `λx.(λy.(λz.z))`
** `λtos.st`: `λt.(λo.(λs.st))` => Alpha Equivalence
** `λmnp.mn`: `λm.(λn.(λp.mn))`

==== Chapter Exercises: P. 17

Combinators:

. `λx.xxx`: Combinators
. `λxy.zx`: No, `z` is a free variable
. `λxyz.xy(zx)`: Combinators
. `λxyz.xy(zxy)`: Combinators
. `λxy.xy(zxy)`: No, `z` is a free variable.

Normal form or diverge?:

. `λx.xxx`: Divergence.
. `(λz.zz)(λy.yy)`: Divergence.
. `(λx.xxx)z`: Normal form. => `zzz`

Beta reduce:

. `(λabc.cba)zz(λwv.w)`:
.. `(λa.λb.λc.cba)zz(λw.λv.w)`:
.. `(λb.λc.cbz)z(λw.λv.w)`:
.. `(λc.czz)(λw.λv.w)`:
.. `(λw.λv.w)zz`:
.. `(λv.z)z`:
.. `z`:
. `(λx.λy.xyy)(λa.a)b`:
.. `(λy.(λa.a)yy)b`:
.. `(λa.a)bb`:
.. `(b)b`:
.. `bb`:
. `(λy.y)(λx.xx)(λz.zq)`:
.. `(λx.xx)(λz.zq)`:
.. `(λz.zq)(λz.zq)`:
.. `(λz.zq)q`:
.. `qq`:
. `(λz.z)(λz.zz)(λz.zy)`:
.. `(λz.z)(λz'.z'z')(λz''.z''y)`:
.. `(λz'.z'z')(λz''.z''y)`:
.. `(λz''.z''y)(λz''.z''y)`:
.. `(λz''.z''y)y`:
.. `yy`:
. `(λx.λy.xyy)(λy.y)y`:
.. `(λx.λy.xyy)(λy'.y')y'''`:
.. `(λy.(λy'.y')yy)y'''`:
.. `((λy'.y')y'''y''')`:
.. `y'''y'''`:
.. `yy`:
. `(λa.aa)(λb.ba)c`:
.. `(λa.aa)(λb.ba)c`:
.. `(λb.ba)(λb.ba)c`:
.. `((λb.ba)a)c`:
.. `(aa)c`:
.. `aac`:
. `(λxyz.xz(yz))(λx.z)(λx.a)`:
.. `(λx.λy.λz'.xz'(yz'))(λx.z)(λx.a)`:
.. `(λy.λz'.(λx.z)z'(yz'))(λx.a)`:
.. `(λz'.(λx.z)z'((λx.a)z'))`:
.. `(λz'.z((λx.a)z'))`:
.. `(λz'.z((a)))`:
.. `(λz'.za)`:

=== Definitions

. The *lambda* in lambda calculus is the greek letter λ used to introduce, or abstract, arguments for binding in an expression.
. A lambda *abstraction* is an anonymous function or lambda term. `(λx.x + 1)`. The head of the expression, `λx.`, abstracts out the term `x + 1`. We can apply it to any x and recompute different results for each x. we applied the lambda to.
. *Application* is how one evaluates or reduces lambdas, this binds the argument to whatever the lambda was applied to. Computations are performed in lambda calculus by applying lambdas to arguments until you run out of arguments to apply lambdas to. `(λx.x)1`. This example reduces to `1`, the identity `λx.x` was applied to the value `1`, `x` was bound to `1`, and the lambda’s body is x, so it just kicks the 1 out. In a sense, applying the `λx.x` consumed it. We reduced the amount of structure we had.
. *Lambda calculus* is a formal system for expressing programs in terms of abstraction and application.
. *Normal order* is a common evaluation strategy in lambda calculi. Normal order means evaluating (ie, applying or beta reducing) the *leftmost outermost lambdas first*, evaluating terms nested within after you’ve run out of arguments to apply. Normal order isn’t how Haskell code is evaluated - it’s *call-by-need* instead. We’ll explain this more later. Answers to the evaluation exercises were written in normal order.
